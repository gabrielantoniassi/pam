#include <iostream>
using namespace std;
#include "SMatrix.h"

void randMat(double data[], int tam) {
	for (int i = 0; i < tam*tam; i++)
		data[i] = rand() % 100; // random[ num[ber between 0 and 99
}

int main() {

SMatrix<double, 4, 4> A, B, C(0), D(0);

randMat(A.m_data, 4);
randMat(B.m_data, 4);

double m[50];

m[1]=  A(0,0)*B(0,0);
m[2]=  A(0,1)*B(1,0);
m[3]=  A(0,0)*B(0,1);
m[4]=  A(0,1)*B(1,1);
m[5]=  A(1,0)*B(0,0);
m[6]=  A(1,1)*B(1,0);
m[7]=  A(1,0)*B(0,1);
m[8]=  A(1,1)*B(1,1);

m[9]=  A(0,2)*B(2,0);
m[10]=  A(0,3)*B(3,0);
m[11]=  A(0,2)*B(2,1);
m[12]=  A(0,3)*B(3,1);
m[13]=  A(1,2)*B(2,0);
m[14]=  A(1,3)*B(3,0);
m[15]=  A(1,2)*B(2,1);
m[16]=  A(1,3)*B(3,1);

m[17]= ( A(2,0)+ A(2,2))*(B(0,2)-B(0,0));
m[18]= ( A(2,1)+ A(2,3))*(B(1,2)-B(1,0));
m[19]= ( A(2,0)+ A(2,2))*(B(0,3)-B(0,1));
m[20]= ( A(2,1)+ A(2,3))*(B(1,3)-B(1,1));
m[21]= ( A(3,0)+ A(3,2))*(B(0,2)-B(0,0));
m[22]= ( A(3,1)+ A(3,3))*(B(1,2)-B(1,0));
m[23]= ( A(3,0)+ A(3,2))*(B(0,3)-B(0,1));
m[24]= ( A(3,1)+ A(3,3))*(B(1,3)-B(1,1));

m[25]= ( A(2,0)+ A(2,2)- A(0,0))*(B(2,2)-B(0,2)+B(0,0));
m[26]= ( A(2,1)+ A(2,3)- A(0,1))*(B(3,2)-B(1,2)+B(1,0));
m[27]= ( A(2,0)+ A(2,2)- A(0,0))*(B(2,3)-B(0,3)+B(0,1));
m[28]= ( A(2,1)+ A(2,3)- A(0,1))*(B(3,3)-B(1,3)+B(1,1));
m[29]= ( A(3,0)+ A(3,2)- A(1,0))*(B(2,2)-B(0,2)+B(0,0));
m[30]= ( A(3,1)+ A(3,3)- A(1,1))*(B(3,2)-B(1,2)+B(1,0));
m[31]= ( A(3,0)+ A(3,2)- A(1,0))*(B(2,3)-B(0,3)+B(0,1));
m[32]= ( A(3,1)+ A(3,3)- A(1,1))*(B(3,3)-B(1,3)+B(1,1));

m[33]= ( A(0,0)- A(2,0))*(B(2,2)-B(0,2));
m[34]= ( A(0,1)- A(2,1))*(B(3,2)-B(1,2));
m[35]= ( A(0,0)- A(2,0))*(B(2,3)-B(0,3));
m[36]= ( A(0,1)- A(2,1))*(B(3,3)-B(1,3));
m[37]= ( A(1,0)- A(3,0))*(B(2,2)-B(0,2));
m[38]= ( A(1,1)- A(3,1))*(B(3,2)-B(1,2));
m[39]= ( A(1,0)- A(3,0))*(B(2,3)-B(0,3));
m[40]= ( A(1,1)- A(3,1))*(B(3,3)-B(1,3));

m[41]= ( A(0,2)- A(2,0)- A(2,2)+ A(0,0))*B(2,2);
m[42]= ( A(0,3)- A(2,1)- A(2,3)+ A(0,1))*B(3,2);
m[43]= ( A(0,2)- A(2,0)- A(2,2)+ A(0,0))*B(2,3);
m[44]= ( A(0,3)- A(2,1)- A(2,3)+ A(0,1))*B(3,3);
m[45]= ( A(1,2)- A(3,0)- A(3,2)+ A(1,0))*B(2,2);
m[46]= ( A(1,3)- A(3,1)- A(3,3)+ A(1,1))*B(3,2);
m[47]= ( A(1,2)- A(3,0)- A(3,2)+ A(1,0))*B(2,3);
m[48]= ( A(1,3)- A(3,1)- A(3,3)+ A(1,1))*B(3,3);

m[49]=  A(2,2)*(B(2,0)-B(2,2)+B(0,2)-B(0,0));
m[50]=  A(2,3)*(B(3,0)-B(3,2)+B(1,2)-B(1,0));
m[51]=  A(2,2)*(B(2,1)-B(2,3)+B(0,3)-B(0,1));
m[52]=  A(2,3)*(B(3,1)-B(3,3)+B(1,3)-B(1,1));
m[53]=  A(3,2)*(B(2,0)-B(2,2)+B(0,2)-B(0,0));
m[54]=  A(3,3)*(B(3,0)-B(3,2)+B(1,2)-B(1,0));
m[55]=  A(3,2)*(B(2,1)-B(2,3)+B(0,3)-B(0,1));
m[56]=  A(3,3)*(B(3,1)-B(3,3)+B(1,3)-B(1,1));

C(0,0) = m[1] + m[2] + m[9] + m[10];
C(0,1) = m[3] + m[4] + m[11] + m[12];
C(1,0) = m[5] + m[6] + m[13] + m[14];
C(1,1) = m[7] + m[8] + m[15] + m[16];

C(2,0) = m[1] + m[2] + m[25] + m[26] + m[33] + m[34] + m[49] + m[50];
C(2,1) = m[3] + m[4] + m[27] + m[28] + m[35] + m[36] + m[51] + m[52];
C(3,0) = m[5] + m[6] + m[29] + m[30] + m[37] + m[38] + m[53] + m[54];
C(3,1) = m[7] + m[8] + m[31] + m[32] + m[39] + m[40] + m[55] + m[56];

C(0,2) = m[1] + m[2] + m[25] + m[26] + m[17] + m[18] + m[41] + m[42];
C(0,3) = m[3] + m[4] + m[27] + m[28] + m[19] + m[20] + m[43] + m[44];
C(1,2) = m[5] + m[6] + m[29] + m[30] + m[21] + m[22] + m[45] + m[46];
C(1,3) = m[7] + m[8] + m[31] + m[32] + m[23] + m[24] + m[47] + m[48];

C(2,2) = m[1] + m[2] + m[25] + m[26] + m[33] + m[34] + m[17] + m[18];
C(2,3) = m[3] + m[4] + m[27] + m[28] + m[35] + m[36] + m[19] + m[20];
C(3,2) = m[5] + m[6] + m[29] + m[30] + m[37] + m[38] + m[21] + m[22];
C(3,3) = m[7] + m[8] + m[31] + m[32] + m[39] + m[40] + m[23] + m[24];

cout << A << endl;
cout << B << endl;
cout << C << endl;
for (int i = 0; i < 16; i++)
	D.m_data[i] = C.m_data[i] - A.mul<4>(B).m_data[i];
cout << D << endl;
}
